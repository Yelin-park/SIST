package days17;

/**
 * @author Yelin
 * @date 2022. 3. 14. - 오후 12:46:46
 * @subject 질문/답변
 * @content
 */
public class Ex01 {

	public static void main(String[] args) {
		
		// public static final double PI = 3.141592;
		// final을 선언하면 getter, setter을 선언하지 않아도 됨
		
		
		
		/*
		new Document();
		new Document();
		new Document("자바");
		new Document("C");
		new Document();
		*/
		
		System.out.println(Document.count);
	} // main

} // class

class Document{
	
	public static int count; 	
	
	static {
		count  = 1;
		System.out.println("> s{}" + count);
	}
	
	
	{ 
		++count;
		System.out.println("> i{}" + count);
	}
	
	
	public Document() {
		 // count++; 인스턴스 초기화 블럭으로 뺌
		System.out.println("문서-" + count);
		// this("제목없음 -" + count);

	}

	public Document(String title) {
		// count++; 인스턴스 초기화 블럭으로 뺌
		System.out.println(title + "문서-" + count);
	}

	
} // Document class










/*
 * [ 각 설명 및 예를 들어 설명하세요.. ]
 * 1. 생성자 10가지 설명
 * 1) 생성자는 메서드이다.
 * 2) 생성자는 오버로딩이 가능하다.
 * 3) 생성자는 상속이 안된다
 * 4) 생성자는 인스턴스 초기화를 하는 것
 * 5) 매개변수가 없는 것을 디폴트 생성자라고 한다.
 * 6) 생성자는 클래스에 단 하나도 만들어지지 않으면 컴파일러가 자동으로 디폴트 생성자를 만들어준다
 * 7) 생성자의 이름은 클래스 이름과 동일해야한다.
 * 8) 생성자는 리턴값이 없으며, void 사용x 아무것도 적지 않는다.
 * 9) 생성자 호출 시기 : 인스턴스 생성할 때 자동으로 호출된다(강제로 호출 x)
 * 10) 접근지정자 4가지 사용 가능
 * 
 * 2. this 정의
 * 	1) this는 키워드(예약어)이다
 * 	2) this는 클래스 자기 자신을 가리키는 참조변수
 * 
 * 2-2. this의 3가지 용도
 *  1) 클래스 자기 자신을 가리키는 참조변수의 this
 *  2) 생성자 안에서 또 다른 생성자를 호출할 때의 this
 *  3) 단독으로 사용될 때의 this - 리턴값, 매개변수
 *  
 * 3. static 키워드 설명 ***
 *  1) static은 제어자이다.
 *  2) static 변수, static 클래스, static 메서드가 있다
 *  3) static 사용할 수 있는 곳 : 멤버변수(필드), 클래스, 초기화블럭
 * 
 * 3-2. 변수 3가지 설명
 * 지역변수 : 초기화를 하지 않으면 사용할 수 없다.
 * 인스턴스 변수 : 인스턴스가 생성이 되어야 사용할 수 있다. 초기화를 하지 않아도 자료형의 기본값으로 초기화가 되어진다.
 * 클래스 변수(static 변수) : 인스턴스가 생성이 되지 않아도 사용이 가능하며, 하나의 클래스 안에서 동일한 값을 사용해야 하는 경우 사용(공유변수)
 * 
 * 3-3. 메서드 2가지 설명
 * 인스턴스 메서드 : 인스턴스가 생성이 되어야 사용할 수 있는 메서드로 인스턴스 변수와 클래스 변수 사용해도 된다.
 * 클래스 메서드(static 메서드) : 인스턴스가 생성이 되지 않아도 사용할 수 있으며, 인스턴스 변수는 사용할 수 없다.
 * 								  자주 사용하는 메서드는 static을 붙여서 선언
 * 
 * 4. getter, setter 설명
 * private로 선언된 멤버에 접근할 수 있는 방법으로 메서드이다.
 * private로 선언하여 getter, setter를 사용하는 이유는 읽기 전용이나 쓰기 전용으로 사용하기 위해서
 * 					  유효한 값을 할당하기 위해서 이다. 한 번만 물어보고 입력받는 것이 좋은 코딩
 * 
 * 5. 객체 배열 초기화 설명
 *    배열을 초기화할 때 처럼 선언하면 되며 배열을 선언하고 각 요소에 대해서 인스턴스 생성을 해야 사용이 가능
 *    객체명[] 배열명 = {
 *    new 객체명(),
 *    new 객체명(),
 *    new 객체명() };
 * 
 * 6. 필드(멤버변수) 초기화 방법  3가지 설명
 * 명시적 초기화 : 가장 우선순위가 높은 초기화 방법 클래스 필드 선언시 값을 할당하는 것
 * 생성자 : 우선순위가 가장 낮은 방법으로 생성자 {} 안에 선언
 * 초기화블럭
 *  ㄴ 인스턴스 초기화 블럭 : 객체가 생성될 때 마다 실행이 되며, 객체가 생성될 때마다 공통으로 사용되어지는 값을 넣는다.
 *  ㄴ 클래스 초기화 블럭 : 객체 생성 유무와 관계없이 프로그램 시작시 1번 실행된다.
 *  
 * 7. 객체 복사 및 복제 차이점 설명
 *  객체 복사는 객체가 가지고 있는 주소 값을 복사하여 동일한 값을 가지게 하는 것, 복사는 값을 변경하면 복사해주는 객체와 복사당한 객체가 같이 변경됨
 *  객체 복제는 객체가 가지고 있는 주소에 할당된 값을 복사하는 것을 말한다. 복제는 값을 변경하면 변경된 값으로 나옴
 */