package days19;

/**
 * @author Yelin
 * @date 2022. 3. 16. - 오전 9:25:57
 * @subject p390. days18.Ex16 이어서 인터페이스 장점
 * @content
 * 		3) 서로 관계 없는 클래들에게 관계를 맺어 줄 수 있다.
 * 		- 서로 관계가 없다 -> 서로 상속 관계가 없다. 같은 조상클래스를 가지고 있지 X
 * 		- 인터페이스를 공통적으로 구현하도록 함으로써 서로 관계를 맺어줄 수 있다.
 * 		예) has-a 관계(포함관계) 설명
 * 			Engine - Car
 * 			- 결합력이 높은 코딩은 좋지 않은 코딩
 * 				class Car {
 * 					Engine engine = new Engine(); // 명시적 초기화로 생성하면 결합력이 좋은 코딩
 *				} 
 * 				ex) 십자드라이버 -> 일체형일 경우 십자가 뭉개지면 드라이버 전체를 버려야함
 * 			- 생성자 DI, setter DI로 코딩 변경 (외부에서 객체를 주입받도록)
 * 			각각 다른 회사에 만든 Engine을 Car 클래스에 DI(의존성 주입)
 * 			H_Engine
 * 			S_Engine		DI			Car[3개의 엔진 사용]
 * 			K_Engine
 * 			자동차 클래스에서 다른 클래스에서 만든 엔진을 바로 사용할 수 있도록 인터페이스 구현
 * 
 * 			> 엔진인터페이스 IEngine 선언 후 H, S, K_Engine 클래스 구현
 * 
 * 
 * 		 4) 독립적인 프로그래밍 가능하다.
 *		 	인터페이스를 하나를 만들고나면 클래스를 만들지 않고도 코딩을 할 수 있다.
 *	  		ex) IEngine을 만들면 Car 클래스 안에 생성자와 메서드 구현한 거..? 
 */
public class Ex01 {

	public static void main(String[] args) {
	
		// [인터페이스 장점 3번째] : 호환이 되는 것(Car 클래스에 Engine 3가지가 다 사용 가능)
		Car myCar = new Car();
		myCar.setEngine(new H_Engine()); // setter 의존성 주입(DI)
		// myCar 10년 후 고장나서 K엔진 교체
		myCar.setEngine(new K_Engine()); // 엔진 호환
		
	} // main

} // class

/*
 * 1. OOP의 특징에 대해서 자세히 설명하세요
 * 	1) 상속성 : 기존클래스를 재사용하여 클래스를 선언(작성)할 수 있다
 * 
 * 	2) 다형성 : 여러 가지 형태를 가질 수 있는 의미로, 자바에서는 부모타입의 객체가 자식타입의 인스턴스를 참조할 수 있고,
 * 				업캐스팅한 자식타입의 객체를 부모타입의 인스턴스를 참조할 수 있다.
 * 
 * 	3) 추상화 : abstract 키워드를 사용하여 뼈대만 있는 추상화메서드와 추상화클래스를 만들 수 있다.
 * 				
 * 	4) 캡슐화(은닉화) : 클래스 접근제어자는 제외하고 주로 멤버 앞에 붙는 접근제어자로 캡슐화를 할 수 있다.
 * 						캡슐화를 하는 이유는 외부에서 데이터를 보호하기위해서
 * 
 * 2. 패키지와 import문에 대해서 설명하세요 
 * 	패키지는 서로 관려있는 클래스와 인터페이스의 묶음이다.
 * 	패키지는 물리적으로 폴더가 되며, 클래스는 물리적으로 파일이 된다.
 * 
 *	import는 다른 패키지 안에 있는 클래스를 사용하기 위해서 import 문을 선언한다.
 *	static import문을 선언하면 클래스명을 생략하고 사용할 수 있다.
 *	기본적으로 java.lang.* 이 컴파일 되어있다.
 *
 * 3. abstract 키워드에 대해서 설명하세요 **
 * 	abstract 키워드는 미완성이라는 의미
 * 	abstract 키워드가 붙으면 추상메서드와 추상클래스가 된다.
 * 	abstract는 자식클래스에서 재정의를 해야한다. 
 * 
 * 3-2. 추상 메서드
 * 	선언부만 구현이 되고 몸체는 구현이 안된 불완전한 메서드이다.
 * 
 * 3-3. 추상 클래스
 * 	추상메서드를 1개 이상 가지고 있으며, 인스턴스를 생성할 수 없다.
 * 	
 * 
 * 4. 싱글톤을 구현하는 방법에 대해서 설명하세요. 
 * 	private 접근제어자를 가진 생성자로 인스턴스를 1개만 생성하겠다는 의미
 * 	내부에서만 접근이 가능하고 외부에서 인스턴스를 생성할 수 없다.
 * 	단, 외부에서 인스턴스를 사용할 수 있도록 public 메서드를 구현한다. 이 메서드는 public인 동시에 static 이어야 한다.
 * 	
 * 5. 업캐스팅과 다운캐스팅에  대해서 설명하세요.
 * 	자식타입의 객체를 부모타입의 인스턴스를 참조하는 것 -> 업캐스팅(자동형변환)
 * 	부모타입의 객체를 자식타입의 인스턴스를 참조하는 것 -> 다운캐스팅(강제형변환, cast 연산자사용)
 * 
 * 6. 매개변수의 다형성에 대해서 설명하세요.
 * 	부모클래스 타입의 매개변수가 있으면 부모클래스를 상속받은 자식클래스 인스턴스가 들어올 수 있다.
 * 	자동으로 업캐스티이 되어짐
 * 7. 인터페이스의 다형성에 대해서 설명하세요.
 * 	인터페이스의 다형성은 그 인터페이스를 구현한 클래스의 인스턴스를 참조하겠다는 의미
 * 
 * 8. 멤버 앞에 붙이는 접근 지정자에 대해서 자세히 설명하세요. 
 * public : 패키지 내부, 외부 어디서든 접근(참조)가능
 * protected : 패키지 내부에서 접근(참조)가능 + 상속개념(부모클래스를 상속받은 자식클래스는 부모클래스 멤버에 접근할 수 있다)
 * default : 패키지 내부에서 접근(참조)가능
 * private : 같은 클래스에서 접근(참조) 가능
 * 범위가 넓은 순은 위에서 아래로
 * 
 * 9. 인터페이스 개요 *****
 * 	1) 인터페이스는 참조타입의 자료형
 * 	2) 일반메서드와 필드(멤버변수)가 하나도 없다
 * 	3) 인터페이스도 일종의 추상화클래스이다. ( 객체를 생성할 수 없고 몸체가 구현되지 않으 불완전한 추상메서드)
 * 	4) JDK 1.8부터 static 메서드와 디폴트 메서드를 가질 수 있다.
 * 	5) 인터페이스는 접근제어자 4가지 사용이 가능하고, 기타제어자를 사용할 수 없다.
 * 	6) 다른 클래스 선언(작성)할 때 도움을 줄 목적으로 사용된다.
 * 	7) 인터페이스끼리 상속이 가능하며, 다중상속이 가능하다. 참조할 것은 Object가 부모클래스가 아니다.
 * 
 * 9-2. 인터페이스 선언 형식
 * [접근제어자] interface 인터페이스명 {
 * 	// 추상메서드 선언 -> public abstract 생략 가능
 *	// 상수 선언 -> public static final 생략 가능
 * }
 * 
 * 9-3. 인터페이스 장점
 * 	1) 개발 시간 단축 
 * 	2) 표준화 가능
 * 
 * 9-4. 인터페이스의    멤버의  제약 사항
 * 	100% 추상화메서드와 상수로 이루어져있음 -> 일반메서드와 매개변수로 이루어져있지 X
 * 
 * 9-5. 아래 코딩에서 인터페이스 관련해서 설명할 수 있는 것에 대해서 설명하세요 
   public static void main(String[] args) { 
      List  list = new ArrayList();    인터페이스 업캐스팅         
      disp(  list  );                   
      disp( new ArrayList() );			
   } // main        
   
   private static void disp(  List list  ) {  인터페이스 매개변수 다형성 -> 그 인터페이스를 구현한 클래스 타입의 인스턴스로 사용
   }
 * */
