package days15;

public class Ex01 {

	public static void main(String[] args) {
		// [객체 선언 및 생성] 관련
		// 에러 메시지 : The constructor System() is not visible
		// 해석 : 
		// System s = new System();
		// The System class contains several useful class fields and methods. It cannot be instantiated. 
		// 시스템 클래스는 유용한 클래스 필드와 메서드로 이루어져 있다.        인스턴스화 할 수 없는 클래스 이다.
		
		// 필드는 2가지가 있다.
		// 1) 인스턴스 필드(변수)
		// 2) 클래스 필드(변수)  - static 키워드와 연계
		// ---------------------------------------------------------------------------------------------------------------
		
		/*
		 * [클래스 선언 형식]
		 * [접근지정자] [기타제어자] class 클래스명 [extends 수퍼클래스] [implements 인터페이스] {
		 * 
		 * -	Modifiers : 접근지정자와 기타제어자를 합쳐서 Modifiers라고 한다. 빨간 네모박스 안에 있는 것이 접근지정자
		 * 				ㄱ. 접근지정자 : ㅇ 버튼 : radio button : 하나만 선택 가능
		 * 				ㄴ. 기타제어자 : ㅁ 버튼 : check box    : 여러 개 선택 가능
		 * }
		 * 
		 * 1. 클래스 선언 시 [접근지정자] 종류 설명 - p234
		 *  1) public : 패키지 내부/외부 어디서든 상속과 참조가 가능한 경우
		 *  			ex) Tv 클래스
		 *  2) default : 패키지 내부에서만 상속과 참조가 가능한 경우
		 *  			ex) Person 클래스 + 속성(이름, 나이 등등), 기능(걷기, 뛰기, 먹기, 마시기 등등)
		 *  			package를 선택하니 default 종류의 접근지정자를 주어지는데 클래스 파일에는 접근지정자가 보이지 않음(생략)
		 *  
		 *   -- 독립적인 클래스로 선언할 때는 사용할 수 없는 접근 지정자이다. --
		 *   	중첩클래스로 선언할 때는 사용할 수 있는 접근 지정자(클래스 안에 클래스 == 중첩 클래스 == 내부 클래스) > 내부 클래스 설명할 때 다시 배울 예정
		 *  3) private		비활성화 : 같은 파일 내에서만 상속과 참조가 가능하다.
		 *  4) protected	비활성화 : 패키지 내부에서는 상속과 참조가 가능하다.
		 *  						   + 패키지 외부에서는 상속만 가능(default와 다른 점)
		 */
		
		 // 2. 같은(내부) 패키지 안에서 public  클래스 Tv와 default  클래스 Person 참조가 가능한지 확인  --> days01.ModifiersTest.java
		 // 		days15.Ex01.main() 메서드에서
		 // 			ㄴ public days15.Tv      클래스 참조 사용
		 // 			ㄴ default days15.Person 클래스 참조 사용
		 //  
		 //	ㄱ. Tv 객체 선언하고 생성
		 Tv t1 = new Tv();  // public 접근지정자로 선언된 클래스를 같은 패키지 안에서 참조 가능하다(확인)
		 t1.channel = 11;
		 t1.channelUp();
		 System.out.println(t1.channel);
		 
		 // ㄴ. Person 객체 선언하고 생성
		 Person p1 = new Person(); // default 접근지정자로 선언된 클래스를 같은 패키지 안에서 참조 가능하다(확인)
		 p1.name = "이재명";
		 p1.run();
		 p1.name = "윤석열";
		 p1.run();


	} // main

} // class


/*
// 1. OOP 설명
 * 객체 지향 프로그래밍(Object Oriented Programming)으로 객체 단위로 프로그램을 개발하겠다.
 * 객체 단위로 프로그램을 하게되면 유지, 보수가 용이하고 분업화가 가능하여 팀작업을 할 수 있어 생산성이 좋다

// 2. 클래스
 * 객체를 만들기 위한 설계도

// 3. 객체
 * 객체(Object) == 개체 == 물건
 * 클래스로 만들어져 실제로 존재하는 것(유형, 무형)

// 4. 인스턴스
 * 클래스로 만들어진 객체를 인스턴스라고 한다.
 * 인스턴스는 객체를 통해 참조가능
 * 

// 5. 인스턴스화
 * 클래스로 객체를 만드는 과정을 인스턴스화라고 한다.

// 6. 클래스의 구성요소
 * 객체의 구성요소도 되며 멤버라고 부른다.
 * 속성+기능으로 이루어져있다.
 * 속성(filed) == 멤버변수 == 상태 == 특성
 * 기능(function) == 멤버함수 == 메서드

// 7. 클래스 선언 형식
 * [접근지정자] [기타제어자] class 클래스명 [extends 수퍼클래스] [implements 인터페이스] {
 * 		클래스의 멤버 선언
 * 		속성(멤버변수)
 * 		기능(멤버함수)
 * 	
 * }

// 8. 클래스의 특징 == OOP의 특징
 *   1) 상속성
 *   2) 다형성
 *   3) 추상화
 *   4) 캡슐화
 *   5) 은닉화

// 9. 객체 선언 및 생성
 * 클래스명 참조변수(객체) = new 클래스명();
 * ex) Car myCar = new Car();
 * 
 * new 연산자에 의해 힙영역에 객체가 생성되어진다. 
 * 메모리에 할당되어져 사용할 수 잇는 것이 인스턴스
 * 

// 10. 클래스 설계 과정
 *   1) 객체의 구성요소 파악 후 목록 작성
 *   2) 클래스 선언
 *   3) 객체 생성 -  테스트
 *   4) 테스트 후 문제점 유지, 보수
 *   5) 상용화
 *   6) 상용화 후 문제점 파악 -> 멤버(속성, 기능) 추가(확장) - > 버전 관리
 * 
// 11. 클래스와 객체와 인스턴스의 차이점 설명
 * 		클래스는 객체를 만드는 설계도이고
 * 		객체는 클래스를 통해 만들어져 실제로 존재하는 것(유형, 무형)이다.
 * 		클래스를 통해 객체(실체)를 실제화로 만드는 과정을 인스턴화라고 하는데
 * 		인스턴스화를 통해 만들어진 객체를 인스턴스라고 한다.
 * 		인스턴스는 new연산자에 의해서 힙영역에 생성된 객체이다.
*/

/*
Car mycar = new Car();
Car 클래스
myCar 객체
new Car() 인스턴스화 코딩, 이걸로 탱해 생성된 객체가 인스턴스
*/
