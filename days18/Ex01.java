package days18;

/**
 * @author Yelin
 * @date 2022. 3. 15. - 오전 9:26:27
 * @subject 어제 복습
 * @content
 */
public class Ex01 {

	public static void main(String[] args) {
		//	  [상속계층도]
		//       Object
		// 	       ↑
		//   	Employee
		//		name, arrd, tel, hire
		//		dispEmpInfo()
		//  	↑			↑
		// Regular     		Temp
		// pay				days, payOfDay
		// getPay()			getPay()
		// 오버라이딩 dEI()   오버라이딩 x
		//   ↑
		//  SalesMan final
		// 	comm, sales
		// 오버라이딩 getPay()
		// 오버라이딩 dEI()
		
		// [다형성] 자동(오토) 업캐스팅
		// Employee emp = new Regular();
		// 문제점 확인

	} // main

} // class

/*
 * 1. 상속 정의 및 장점
 * 	1) 상속이란? 기존 클래스를 재사용하여 새로운 클래스를 선언하는 것
 * 	2) 장점 : 코드의 간결화, 코드의 중복제거 -> 생산성 향상 및 유지보수 용이
 * 
 * 2. 윈도우의 닫기 버튼을 클릭할때 이벤트 처리 방법 설명 ***
 * 
 * 
 * 
 * 3. 단일 상속과 다중 상속 설명
 * 		자바는 다중 상속을 지원하지 않는다. 단일 상속만을 지원
 * 		하나의 클래스에 여러 개를 상속하는 것이 다중 상속
 * 
 * 4. 클래스들 간의 관계
 *   ㄱ. has-a 관계(포함관계) ~ 가지다. -> Car 클래스가 Engine 클래스를 가지고있다.
 *   ㄴ. is-a 관계(상속) ~이다. -> extends 키워드를 사용하여 상속한다.
 *   
 * 5. 결합력이 높은 코딩이란 ?
 * 	명시적 초기화를 할 때 객체 생성을 바로 하는 것 -> 좋은 코딩 X -> Engine이 잘못되면 Car 클래스 전체를 버려야 함
 *  class Car {
 *  Engine eng = new Engine();  -> 결합력이 높은 코딩으로 좋은 코딩X
 *  
 *  Engine eng = null; -> 이렇게 객체 생성을 하지않고 외부에서 객체를 가지고와 주입하는 것이 좋음
 *  
 *  }
 * 
 * 5-2. 생성자를 통한 의존성 주입( DI) 와 setter 를 통한 의존성 주입( DI ) 설명
 * 		DI : 외부에서 객체를 생성해서 가지고 오는 것
 * 		외부에서 객체를 생성하여 private로 선언된 멤버에 객체를 setter을 이용하여 주입
 * 		setCar(Engine engine) {
 * 			this.engine = engine;
 * 		}
 * 
 * 6. this 정의와 3가지 용도
 * 		this는 키워드(예약어)이다.
 * 		this는 클래스 자기자신을 가리키는 참조변수이다.
 * 		1) 인스턴스(클래스 자기자신)를 가리키는 this
 * 		2) 생성자에서 또 다른 생성차를 호출하는 this()
 * 		3) 독립적으로 사용되는 this -> 리턴값, 매개변수
 * 
 * 6-2. super 정의와 3가지 용도
 * 		super는 키워드(예약어)이다.
 * 		super는 클래스의 부모클래스의 인스턴스를 가리키는 참조변수이다.
 * 		1) 부모클래스의 인스턴스를 가리키는 super
 * 		2) 생성자에서 또 다른 부모 생성자를 호출할 때의 super()
 * 		3) 독립적으로 사용되는 super -> 리턴값, 매개변수??
 * 
 * 7. 업캐스팅과 다운캐스팅 설명
 * 		업캐스팅 : 자손 객체(참조변수)가 부모 객체(참조변수)로 형변환 하는 것 -> 자동형변환 가능
 * 		다운캐스팅 : 부모객체(참조변수)가 자손객체(참조변수)로 형변환 하는 것 -> 강제형변환, cast 연산자 사용
 * 
 * 8.  final 클래스 : 최종 클래스로 상속을 할 수 없다.
 *     final 메서드 : 자손클래스에서 오버라이딩을 할 수 없다.
 *     final 변수 : 상수로서 값을 변경할 수 없다. 인스턴스 변수는 명시적 초기화 또는 생성자 안에서 초기화를 꼭 해줘야한다.
 *     				매개변수가 final일시 메서드 안에서 매개변수로 선언된 값을 변경할 수 없다.
 *     
 * 9. java.lang.Object 클래스 설명    
 * 		Object 클래스는 모든 클래스의 최상위 부모 클래스이다.
 * 		extends java.lang.Object 코드가 숨겨져 있으며, 9개의 메서드를 가지고있다.
 * */
